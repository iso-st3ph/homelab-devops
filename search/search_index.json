{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homelab DevOps Overview","text":"<p> Golden Path \u2014 lint \u2192 plan \u2192 approve \u2192 apply \u2192 configure \u2192 smoke across AWS &amp; homelab (Proxmox/NFS). Built with Terraform \u00b7 Ansible \u00b7 Docker \u00b7 GitHub Actions \u00b7 Jenkins \u00b7 MkDocs.</p> <p> </p>"},{"location":"#pipeline-at-a-glance","title":"Pipeline at a glance","text":"<p>```mermaid flowchart TD   A[Developer Laptop] --&gt;|Git Push| B[GitHub Actions / Jenkins]   B --&gt;|Static Checks| C[pre-commit \u00b7 TFLint \u00b7 Checkov \u00b7 Ansible-lint \u00b7 Hadolint]   B --&gt;|Plan| D[Terraform Plan]   D --&gt;|Manual Gate| E[Approve]   E --&gt;|Apply| F[Terraform Apply]   F --&gt;|Configure| G[Ansible Playbooks]   G --&gt;|Deploy/Proxy| H[Docker Reverse Proxy]   F --&gt;|Alt Target| I[Proxmox VM + NFS]   G --&gt;|Smoke Tests| J[Health Checks]</p>"},{"location":"README-site-notes/","title":"Docs","text":"<p>Planned diagram of workflow (Terraform \u2192 Ansible \u2192 Docker \u2192 CI).</p>"},{"location":"ansible/","title":"Ansible Automation","text":"<p>My homelab uses Ansible to automatically configure and deploy workloads across:</p> <ul> <li>\ud83c\udfe0 Proxmox VMs (Docker nodes, NGINX proxy, Wazuh, PBS)</li> <li>\u2601\ufe0f AWS EC2 instances (created via Terraform)</li> <li>\ud83d\uddc3\ufe0f 45Drives NFS storage</li> <li>\ud83d\udd10 Security services (hardening, users, SSH, fail2ban)</li> <li>\ud83d\udce6 Application stack (Docker containers, monitoring, reverse proxy)</li> </ul> <p>This ensures consistent, repeatable infrastructure both at home and in the cloud.</p>"},{"location":"ansible/#end-to-end-automation-flow","title":"\ud83d\ude80 End-to-End Automation Flow","text":"<pre><code>flowchart LR\n  Git[Developer Commit] --&gt; CI[CI Pipeline: lint/validate/test]\n  CI --&gt; Terraform[Terraform Apply]\n  Terraform --&gt; Inventory[Generate Dynamic Inventory]\n  Inventory --&gt; Ansible[Run Ansible Playbooks]\n  Ansible --&gt; Deploy[Deploy Apps &amp; Config]\n  Deploy --&gt; Health[Smoke Tests / Health Checks]\n\n[proxmox]\ndockenode1 ansible_host=192.168.1.201\ndockenode2 ansible_host=192.168.1.202\nwazuh ansible_host=192.168.1.203\nproxy ansible_host=192.168.1.204\npbs ansible_host=192.168.1.205\n\n[aws]\naws-prod ansible_host=54.123.45.67\n\n- name: Base configuration\n  hosts: all\n  become: yes\n\n  roles:\n    - common      # users, system settings\n    - security    # firewall, fail2ban, ssh hardening\n    - docker      # docker + compose install\n</code></pre>"},{"location":"ansible/#ansible-execution-screenshot","title":"\u2705 Ansible Execution Screenshot","text":"<p>Below is a real run of my Ansible playbook against my homelab VMs:</p> <p></p>"},{"location":"ansible/#ansible-workflow-diagram","title":"\ud83d\udd27 Ansible Workflow Diagram","text":"<pre><code>flowchart LR\n  GH[Git Push to GitHub] --&gt; CI[CI Pipeline]\n  CI --&gt; Lint[Lint + Security Scan]\n  CI --&gt; Deploy[Run Ansible Playbook]\n  Deploy --&gt; Proxmox[Configure Proxmox VMs]\n  Deploy --&gt; AWS[Configure AWS EC2 Instance]\n  Proxmox --&gt; Services[Deploy Homelab Services]\n  AWS --&gt; Services\n  Services --&gt; Smoke[Smoke Tests / Health Checks]\n\n  [proxmox]\n192.xxx.x.xxx\n192.xxx.x.xxx\n\n[aws]\n3.89.xx.xx\n\n- name: Homelab Automation Demo\n  hosts: all\n  become: true\n\n  tasks:\n    - name: Ping test\n      ping:\n\n    - name: Ensure NGINX installed (example)\n      apt:\n        name: nginx\n        state: present\n      when: ansible_os_family == \"Debian\"\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<pre><code>flowchart LR\n  Dev[Developer] --&gt;|Git push| CI[GitHub Actions/Jenkins]\n  CI --&gt; Lint[pre-commit \u00b7 TFLint \u00b7 Checkov \u00b7 Hadolint \u00b7 ansible-lint]\n  CI --&gt; Plan[Terraform Plan] --&gt; Gate[Manual Approve] --&gt; Apply[Terraform Apply]\n  Apply --&gt; AWS[AWS EC2]\n  Apply --&gt; Proxmox[Proxmox VM]\n  Proxmox --&gt; NFS[45Drives NFS]\n  AWS --&gt; Ansible[Ansible Configure]\n  Proxmox --&gt; Ansible\n  Ansible --&gt; Proxy[Reverse Proxy (Docker)]\n  Proxy --&gt; Smoke[Health/Smoke]\n</code></pre>"},{"location":"architecture/#proxmox-virtualization-layer","title":"Proxmox Virtualization Layer","text":"<p>This node runs my core homelab workloads: Docker nodes, Nginx reverse proxy, Wazuh, an Ubuntu admin VM, NFS mount (45Drives), and Proxmox Backup Server (PBS).</p>"},{"location":"hire-me/","title":"Hire Me","text":"<p>Stephon \u201cSkip\u201d Skipper \u2014 Linux/DevOps Engineer</p> <ul> <li>3+ yrs Linux sysadmin \u00b7 IaC (Terraform/Ansible) \u00b7 CI/CD (Jenkins/GitHub Actions)  </li> <li>Homelab: Proxmox cluster, NFS, Docker, Wazuh, Grafana</li> <li>Focus: security baselines, automation, reliability</li> </ul> <p>Highlights - Zero-SSH EC2 (IMDSv2, encrypted volumes, SSM access only) - Automated IaC scans (TFLint, Checkov, Hadolint, ansible-lint) - Live docs and reproducible demos</p> <p>Contact - GitHub: iso-st3ph - Email: stephon@ayoskip.info </p>"},{"location":"pipelines/","title":"Pipelines","text":"<p>Flow: lint \u2192 plan \u2192 approve \u2192 apply \u2192 configure \u2192 smoke</p> <ul> <li>Lint: pre-commit (TFLint, Checkov, Ansible-lint, Hadolint)</li> <li>Plan/Apply: Terraform with remote backend (planned)</li> <li>Configure: Ansible targets AWS/Proxmox from TF outputs</li> <li>Deploy: Reverse proxy + sample app</li> <li>Smoke: curl healthchecks (non-200 fails the job)</li> </ul>"},{"location":"projects/","title":"Projects","text":""},{"location":"projects/#terraform-ec2-minimal-module","title":"Terraform: EC2 Minimal Module","text":"<ul> <li>Opinionated tags, keypair, security group.</li> <li>Outputs feed Ansible inventory.</li> <li>Code: <code>terraform/modules/ec2_minimal/</code></li> <li>Try it: <code>terraform/examples/ec2_minimal/</code></li> </ul>"},{"location":"projects/#ansible-nginxhardening-role","title":"Ansible: Nginx/Hardening role","text":"<ul> <li>Idempotent tasks, handler notifications, Molecule-ready layout.</li> <li>Playbook: <code>ansible/site.yml</code></li> <li>Role: <code>ansible/roles/secure/</code></li> </ul>"},{"location":"projects/#docker-reverse-proxy-demo","title":"Docker: Reverse Proxy Demo","text":"<ul> <li><code>docker-compose.yml</code> with a <code>whoami</code> app behind the proxy.</li> <li>Healthchecks + simple smoke script.</li> <li>Folder: <code>docker/reverse-proxy/</code></li> </ul>"},{"location":"projects/#cicd","title":"CI/CD","text":"<ul> <li>Pre-commit: fmt/validate + yamllint.</li> <li>(Optional) GitHub Actions <code>docs.yml</code> to auto-publish MkDocs.</li> <li>Jenkinsfile mirrors IaC workflow with a manual gate.</li> </ul>"},{"location":"terraform/","title":"Terraform Infrastructure","text":"<p>This repo provisions compute both in AWS and Proxmox.</p>"},{"location":"terraform/#components-managed","title":"\u2705 Components Managed","text":"Platform Resources Notes AWS EC2 Instance, networking Terraform Cloud-Init + Ansible bootstrap Proxmox VMs provisioned via Terraform provider Integrates with local homelab"},{"location":"terraform/#folder-structure","title":"\ud83d\uddc2\ufe0f Folder Structure","text":"<p>```bash terraform/ \u251c\u2500 aws-ec2/ \u2502  \u251c\u2500 main.tf \u2502  \u251c\u2500 variables.tf \u2502  \u251c\u2500 outputs.tf \u2502  \u2514\u2500 tests/ \u2514\u2500 modules/    \u2514\u2500 ec2_minimal/       \u251c\u2500 main.tf       \u251c\u2500 variables.tf       \u251c\u2500 outputs.tf       \u2514\u2500 tests/</p> <p>Apply complete! Resources: 2 added, 0 changed, 0 destroyed.</p> <p>Outputs: public_ip = \"X.X.X.X\" instance_id = \"i-abc123\"</p> Feature Status IMDSv2 enforced \u2705 EBS encrypted \u2705 Checkov clean \u2705 No hard-coded creds \u2705 SSM IAM role optional \u2705 <p><code>mermaid flowchart LR Dev --&gt; GitHub GitHub --&gt; CI[Terraform CI Checks] CI --&gt; Plan[terraform plan] Plan --&gt; Gate[Manual Approval] Gate --&gt; Apply[terraform apply] Apply --&gt; AWS[(AWS EC2)] Apply --&gt; Proxmox[(Proxmox VM)]</code>mermaid</p>"}]}