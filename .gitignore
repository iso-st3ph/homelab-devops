# Local .terraform directories
.terraform/

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
# Ansible
*.retry
*.vault
*.vault_pass
*.secret
inventory
inventories/*_secrets.yml

# Python/cache
__pycache__/
*.pyc

# Editor/OS
.DS_Store
.vscode/
.idea/

# Docker
docker-data/
# Terraform
.terraform/
*.tfstate
*.tfstate.*
crash.log
override.tf
override.tf.json
*.tfvars
*.tfvars.json

# Ansible (never commit secrets/inventories with creds)
*.retry
*.vault
*.vault_pass
inventories/*_secrets.yml

# Keys / certs
*.pem
*.key
id_rsa*
id_ed25519*
*.p12

# Editor/OS
.DS_Store
.vscode/
.idea/
__pycache__/
*.pyc

# MkDocs build output
site/

# Terraform build artifacts
.terraform/
*.tfstate
*.tfstate.*
crash.log
crash.*.log
*.tfvars
*.tfvars.json
# keep the lock file in git (pin provider versions)
# !.terraform.lock.hcl
